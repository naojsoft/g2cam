#! /usr/bin/env python
#
# ro_name_svc -- remote object name service
#
import sys
import argparse

from g2base import ssdlog
from g2base.remoteObjects import remoteObjects as ro
from g2base.remoteObjects import remoteObjectNameSvc as ro_ns
from g2base.remoteObjects.ro_config import nameServicePort


if __name__ == '__main__':

    argprs = argparse.ArgumentParser(description="Remote Object Name Service")

    argprs.add_argument("--numthreads", dest="numthreads", type=int,
                        default=20,
                        help="Use NUM threads", metavar="NUM")
    argprs.add_argument("--port", dest="port", type=int,
                        default=nameServicePort,
                        help="Register using PORT", metavar="PORT")
    argprs.add_argument("--pshost", dest="pubsub_host", type=str,
                        default='localhost',
                        help="Connect to pub/sub using HOST", metavar="HOST")
    argprs.add_argument("--psport", dest="pubsub_port", type=int,
                        default=6379,
                        help="Connect to pub/sub using PORT", metavar="PORT")
    argprs.add_argument("--publish-interval", dest="publish_interval",
                        type=float, metavar="SECS",
                        default=10.0,
                        help="How often (SECS) to purge dead services")
    argprs.add_argument("--purge-interval", dest="purge_interval",
                        type=float, metavar="SECS",
                        default=60.0,
                        help="How often (SECS) to purge dead services")
    argprs.add_argument("--purge-delta", dest="purge_delta",
                        type=float, metavar="SECS",
                        default=30.0,
                        help="Delta (SECS) to consider a service dead")
    argprs.add_argument("--svcname", dest="svcname", type=str,
                        default='names',
                        help="Register service as NAME", metavar="NAME")
    ssdlog.addlogopts(argprs)
    ro.addlogopts(argprs)

    (options, args) = argprs.parse_known_args(sys.argv[1:])

    if len(args) != 0:
        argprs.error("incorrect number of arguments")

    ro_ns.main(options, args)
