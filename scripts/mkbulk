#! /usr/bin/env python3
"""
Usage:
  $ mkbulk -o manifest.csv -p SCX /some/path/to/*.fits

  or, using stdin

  $ ls /some/path/to/*.fits | mkbulk.py -o manifest.csv -p SCX
"""
import sys
import os
import csv
import re
import subprocess
from argparse import ArgumentParser


def calc_checksum(program, file_path):
    try:
        # Run checksum externally
        result = subprocess.run([program, file_path],
                                capture_output=True, text=True, check=True)

        # The output will be in the format: "checksum  filename\n",
        # split to get just the checksum
        checksum = result.stdout.split()[0]
        return checksum
    except subprocess.CalledProcessError as e:
        # If sha256sum returns an error, handle it here
        sys.stderr.write(f"Error calculating {program} checksum for '{file_path}': {e}\n")
        return None


def main(options, args):

    outfile = options.outfile
    if not outfile.lower().endswith('.csv'):
        outfile = outfile + '.csv'

    prefixes = []
    if options.prefix is not None:
        prefixes = [pfx.upper() for pfx in options.prefix.split(',')]

    if len(args) == 0:
        print("No files on command line; reading from stdin...")
        args = sys.stdin.read().split('\n')

    with open(outfile, 'w', newline='') as csv_f:
        writer = csv.writer(csv_f, delimiter='|')
        row = ['#FRAMEID', 'path', 'size_bytes']
        if options.sha256sum:
            row.append('sha256sum')
        if options.md5sum:
            row.append('md5sum')
        writer.writerow(row)

        for arg in args:
            path = os.path.abspath(arg)
            _dir, filename = os.path.split(path)

            if len(prefixes) > 0:
                ok = False
                for prefix in prefixes:
                    if re.match(prefix, filename):
                        ok = True
                if not ok:
                    continue

            if '.fits' in filename:
                pos = filename.index('.fits')
                frameid = filename[:pos]
            else:
                frameid = filename
            frameid = frameid.upper()

            row = [frameid, path, os.stat(path).st_size]
            if options.sha256sum:
                row.append(calc_checksum('sha256sum', path))
            if options.md5sum:
                row.append(calc_checksum('md5sum', path))

            writer.writerow(row)


if __name__ == '__main__':

    argprs = ArgumentParser(description="Gen2 bulk file transfer list preparer")

    argprs.add_argument("-o", "--outfile", dest="outfile", metavar="FILE",
                        default=None,
                        help="Specify FILE for output")
    argprs.add_argument("-p", "--prefix", dest="prefix", metavar="PREFIX",
                        default=None,
                        help="Specify PREFIX to match for output")
    argprs.add_argument("--sha256", dest="sha256sum",
                        default=False, action="store_true",
                        help="Generate SHA256 sums for file integrity")
    argprs.add_argument("--md5", dest="md5sum",
                        default=False, action="store_true",
                        help="Generate MD5 sums for file integrity")

    (options, args) = argprs.parse_known_args(sys.argv[1:])

    if options.outfile is None:
        argprs.error("Please specify an output file with -o")

    main(options, args)
